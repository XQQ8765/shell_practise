通过几个例子看sed的模式空间与保持空间
http://www.cnblogs.com/binary/archive/2005/04/01/130544.html

SED 教程
http://hi.baidu.com/apparitor/blog/item/f50fa90fc8eee9df7bcbe106.html

sed 学习二
http://huangyu.blog.51cto.com/1021686/803526

-------------------------------------------------------------------------------
通过几个例子看sed的模式空间与保持空间 
这是自己好久以前在ChinaUnix上原创的一贴，后来颇为精华贴，一直有点沾沾自喜，呵呵，再次贴在这里，鼓励鼓励自己 


近来看到几个不是很常见，但是比较有用的sed例子，都和hold space与pattern space有关，于是对几个例子做了自己认为正确的解释，贴出来与大家共享并请指正，继续讨论 

例子一 
sed G 
在文件每一行下面输出一个空行 

代码:  

$ cat foo 
11111111111111 
22222222222222 
33333333333333 
44444444444444 
55555555555555 

$ sed G foo 
11111111111111 

22222222222222 

33333333333333 

44444444444444 

55555555555555 

 

解释： 

sed 中 G 的用法 
The G function appends the contents of the holding area to the contents of the pattern space. The former and new contents are separated by a newline. The maximum number of addresses is two. 

hold space : 保持空间（或者叫保留空间、缓冲区）,初始为空 
pattern space ：模式空间 

在上面的例子中，将为空的hold space附加到文件的每一行后面，所以结果是每一行后面多了一个空行 

引申出： 
sed '/^$/d;G' 
在文件的每一个非空行下面输出一个空行 
sed '/^$/d;G;G' 
在文件的每一个非空行下面输出两个空行 

代码:  

$ cat foo 
11111111111111 
22222222222222 

33333333333333 
44444444444444 
55555555555555 

$ sed '/^$/d;G' foo 
11111111111111 

22222222222222 

33333333333333 

44444444444444 

55555555555555 

 


注：有时会有一些由空格符或者TAB组成的空行，前面的正则式 ^$ 就不能匹配到这样的行，则可以这样 
sed '/[[:space:]]/d;G' 


例子二 
sed '/regex/{x;p;x;}' 
在匹配regex的所有行前面插入一个空行 
代码:  

$ cat foo 
11111111111111 
22222222222222 
test33333333333333 
44444444444444 
55555555555555 

$ sed '/test/{x;p;x;}' foo 
11111111111111 
22222222222222 

test33333333333333 
44444444444444 
55555555555555 
 


解释： 
sed 中 x 的用法 
The exchange function interchanges the contents of the pattern space and the holding area. The maximum number of addresses is two. 
即交换保持空间hold space和模式空间pattern space的内容 

sed 中 p 的作用是把模式空间复制到标准输出。 

分析一下该命令执行过程中保持空间和模式空间的内容 

命令 保持空间 模式空间 
x 执行前:null 执行后:test\n 执行前:test\n 执行后:null 
p 执行前:null 执行后:test\n 执行前:test\n 执行后:null 输出一个空行 
x 执行前:test\n 执行后:null 执行前:null 执行后:test\n 

(注：把test所在的行简写为test了) 

引申： 
可以试验一下 sed '/test/{x;p;}' foo 或者 sed '/test/{p;x;}' foo 等，看看结果，体会两个空间的变化 

相应的： 
sed '/regex/G' 是在匹配regex的所有行下面输出一个空行 
sed '/regex/{x;p;x;G;}' 是在匹配regex的所有行前面和下面都输出一个空行 


例子三 
sed 'n;G;' 
在文件的偶数行下面插入一个空行 
代码:  

$ cat foo 
11111111111111 
22222222222222 
33333333333333 
44444444444444 
55555555555555 

$ sed 'n;G;' foo 
11111111111111 
22222222222222 

33333333333333 
44444444444444 

55555555555555 
 

解释： 
sed 中 n 的用法：将模式空间拷贝于标准输出。用输入的下一行替换模式空间。 

执行 n 以后将第一行输出到标准输出以后，然后第二行进入模式空间，根据前面对 G 的解释，会在第二行后面插入一个空行，然后输出；再执行 n 将第三行输出到标准输出，然后第四行进入模式空间，并插入空行，依此类推 

相应的： 
sed 'n;n;G' 表示在文件的第 3,6,9,12,... 行后面插入一个空行 
sed 'n;n;n;G' 表示在文件的第 4,8,12,16,... 行后面插入一个空行 
sed 'n;d' 表示删除文件的偶数行 


例子四 
sed '$!N;$!D' 
输出文件最后2行，相当于 tail -2 foo 

代码:  

$ cat foo 
11111111111111 
22222222222222 
33333333333333 
44444444444444 
55555555555555 

$ sed '$!N;$!D' foo 
44444444444444 
55555555555555 

 


解释： 

D 删除模式空间内第一个 newline 字母 \n 前的资料。 
N 把输入的下一行添加到模式空间中。 

sed '$!N;$!D' : 对文件倒数第二行以前的行来说，N 将当前行的下一行放到模式空间中以后，D 就将模式空间的内容删除了；到倒数第二行的时候，将最后一行附加到倒数第二行下面，然后最后一行不执行 D ，所以文件的最后两行都保存下来了。 


还有 N 的另外一种用法 
代码:  

$ sed = foo | sed N 
1 
11111111111111 
2 
22222222222222 
3 
33333333333333 
4 
44444444444444 
5 
55555555555555 

$ sed = foo | sed 'N;s/\n/   /' 
1       11111111111111 
2       22222222222222 
3       33333333333333 
4       44444444444444 
5       55555555555555 
 

解释： 
N 的作用是加上行号，可以用于格式化输出文件 


例子五 
sed '1!G;h;$!d' 
sed -n '1!G;h;$p' 
将文件的行反序显示，相当于 tac 命令(有些平台没有这个命令) 

代码:  

$ cat foo 
11111111111111 
22222222222222 
33333333333333 

$ sed '1!G;h;$!d' foo 
33333333333333 
22222222222222 
11111111111111 

$ sed -n '1!G;h;$p' foo 
33333333333333 
22222222222222 
11111111111111 
 


解释： 
sed 中 h 用法：h 
The h (hold) function copies the contents of the pattern space into a holding area, destroying any previous contents of the holding area. 
意思是将模式空间的内容保存到保持空间中去 

sed 中的 d 表示删除模式空间。 

1!G表示除了第一行以外，其余行都执行G命令；$!d表示除了最后一行以外，其余行都执行d命令。 

看一下sed '1!G;h;$!d'命令执行过程中保持空间与模式空间的变化: 

命令 保持空间 模式空间 
第一行 h;d 执行前:null 执行后:1111\n 执行前:1111\n 执行后:null 
第二行 G;h;d 执行前:1111 执行后:2222\n1111\n 执行前:2222\n 执行后:null 
第二行 G;h 执行前:2222\1111\n 执行后:3333\n2222\n\1111\n 执行前:3333\n 执行后:3333\n2222\n\1111\n 

(注：把各个行简写了) 

这样输出以后就是文件的反序了。 

题外话：在vi中对一个文件进行反序显示的命令是 :g/./m0 , 意思是按照文件正常顺序每找到一行，就把该行放到文件的最上面一行去，这样循环一下正好把文件的行反序显示了。 

-------------------------------------------------------------------------------
SED 教程
-----------------------
ID:gjw_apparitor
-----------------------

1、基本命令
sed是一个流文本编辑器。
保持空间（hold space ）：又叫保留空间或叫预留缓冲区。模式空间可以复制到保持空间，保持空间
的内容也可以复制到模式空间。
模式空间（pattern space ）：是容纳当前输入行的缓冲区。sed命令将当前处理的行读入模式空间进行处理，在该行上执行完所有命令后就将处理好的行打印到屏幕上（除非之前的命令删除了该行），sed处理完一行就将其从模式空间中删除，然后将下一行读入模式空间，进行处理、显示。处理完文件的最后一行，sed便结束运行。sed在模式空间对文件进行处理，所以不会修改原文件，除非显示指明-i选项。


s 替换
[address]s/pattern/replacement/[n|g|p|w]
用replacement替换pattern,如果replacement是&符号，它代表pattern的内容。
n:表示第n个pattern。n是1-512之间的任意一个数字，默认为1.
g:表示全局的，指所有的pattern。
p:表示打印成功替换的那行。
w file:将成功替换的行写到file里。sed 's/pattern/replacement/w file1' file

s/\( \) \(\)\(\)/\n\n\n #可指定位置。

例：
cat text
1*2*3*4
如果想让3*4在令一行。
sed 's/*/\
/2'text

-n 打印。把模式空间当前行送到标准输出。
Sed '/address/{
=
}' -n file 显示匹配行的行号。

d 删除。删除一行的内容。
Sed /address/d

a 追加。放在在匹配的下一行。
[address]a\superaddition
sed '/address/a\superaddition' file

i插入。在配匹配的上一行。
sed '/address/i\superaddition' file

c 替换。替换匹配的那一行。
sed '/address/c\superaddition' file

y 转换。
Sed 'y/abc/ABC' file 将小写字母改成大写字母。
＝ 打印行号。打印匹配行的行号。
Sed '/address/=' file

p 打印。打印寻址的行。
Sed '/address/p' file

-n 读取下一行到模式空间。
Sed '1,/address/{ #从第一行开始匹配第一个address
/address/i\ok
n
}' -i 1.txt

r 读文件。
Sed '/address/r file1/' file ＃读取file1文件把内容追加到address行后边。

w 写文件。
Sed '/address/w file1/' file ＃把file文件的address里的内容写到file1里去。

q 退出。
Sed '/address/q' file ＃到比配的行，运行命令让好退出。


2、高级命令－多模式空间。
N 将多行读入到模式空间。（$!N）这个是防止在读到最后一行时没有下一行时出现的错误。
Sed '/address/{ ＃将address和他的下一行都读到模式空间。
N ＃用s///把他的换行符\n换成＋号。使两行
s/\n/＋/g ＃合成一行。
｝‘ test.txt

D 多模式删除。它只删除模式空间从开始到第一个换行符的内容。多用于删除多余的空行。
Sed '/address/{
N
D ＃他只删除从开始到第一个换行符的内容
}' test.txt ＃如果是d会把模式空间里的内容全部清掉。
P 多行打印。它只打印模式空间从开始到第一个换行符的内容。
Sed '/address/{
N
P ＃他只打印从开始到第一个换行符的内容
}' test.txt ＃如果是p会打印模式空间的全部内容。


3、模式空间和保持空间之间的转换。
h 将模式空间的内容复制到保持空间。
H 将模式空间的内容追加到保持空间。默认保持空间是空，追加是在空行后再加一行。
例：\n追加的内容
g 将保持空间的内容复制到模式空间。
G 将保持空间的内容追加到模式空间。默认保持空间是空，追加是在空行后再加一行。
例：\n追加的内容
x 交换保持空间和模式空间的内容。
Sed '/2/{         ＃找到匹配2的那行
H             ＃模式空间为2追加到保持空间，现在模式空间为2，保持空间为空2
x             ＃交换模式空间和保持空间。现在模式空间为“空2”保持空间为2。
}' test.txt

将语句的某个词改变大小写。
例：
/the .*statement/ ‘{
h
s/.*the \(.*\)statement.*/\1/
y/abcdefghigklmnopqrstuvwsyz/ABCEDFGHIJKLMNOPQRSTUVWXYZ/
G
/s\(.*\)\n\(.*the \).* \(statement.*\)/\2\1\3/
}’ file

解释：
h 将配陪行从保持空间复制到模式空间.
s/.*the \(.*\)statement.*/\1/ 从保持空间提取要改变词的内容取代模式空间。
y 大小写替换。
G 将模式空间的内容追加到保持空间。（模式空间内容\n保持空间内容）
/s 从新排列组合。

4、高级的流控制命令
b 分支。脚本无条件的转向下一个分支指向处。
[address]b[label] #label 是可选的，如果没有给出label。则跳到脚本的结尾处。
例：
:label
Command1
Command2
/pattern/b label
Command3


t 测试。测试在寻址范围内是否成功执行替换。如果是则转移到有label标志的行,没有制定label则跳转到脚本结尾处。如果替换不成功则执行下一条命令
[address]t[label]
例：
/address/ ‘{ 
s/abc/ABC #如果成功替换就打印，没有替换就跳到结尾处。
t
p
}’ test

其他
l 列出模式空间的内容，将不可打印的字符以ASCLL码表示。

Sed 语法
Sed [-n][-e] ’command’ file
Sed [-f] scriptfile file
-n 仅打印p命令s命令标记的行。
-e 接着下一个命令。用于多脚本使用。
-f 一个包含sed命令的文件。

[address]! Command #不匹配

-------------------------------------------------------------------------------
Example 1: Reverse the two lines
In file "data1":
1
2
11
22
111
222
$sed '/1/{h;d};/2/{G}' data1
Output:
2
1
22
11
222
111

-------------------------------------------------------------------------------
Example 2: Remove the blank lines which are more than one
in file "data2":
123


456

789
$sed '/^$/{N;/^\n$/D}' a
123

456

789 
